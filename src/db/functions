# Financials

//Present value of CF

function presentValueOfCashFlows(cashFlowList: number[], rate: number): number {
    let totalPresentValue = 0;
    for (let index = 0; index < cashFlowList.length; index++) {
        const payment = cashFlowList[index];
        totalPresentValue += payment / Math.pow((1 + rate), index + 1);
    }
    return totalPresentValue;
}




//R&D Capitalization

function updateCapRnd(): void {
    const rnd: number[] = [230, 45, 900, 599]; //to be fetched from the form
    const amortization: number = (rnd.reduce((a, b) => a + b, 0) - rnd[0]) / (rnd.length - 1);
    const EBIT_adj: number = rnd[0] - amortization;
    const frctn: number = 1 / (rnd.length - 1);
    const unAmoamortized: number = parseFloat(rnd.reduce((acc, val, i) => acc + (val * (1 - i * frctn)), 0).toFixed(2));
    //console.log([EBIT_adj,unAmoamortized])
}

//actual
export const handleCalculateRandDAdjustments = (form: FormType) => {
  const rndExpenses = form.getValues('randdExpenses')
    ?.map(e => e.expense || 0)
    .filter(e => e > 0) || [];
    
  if (rndExpenses.length < 2) {
    // Not enough data to calculate
    form.setValue('adjustedEbit', form.getValues('ebitTTM') || 0);
    form.setValue('unamortizedAmount', 0);
    return;
  }
  
  const originalEbit = form.getValues('ebitTTM') || 0;
  const currentYearExpense = rndExpenses[0];
  const historicalExpenses = rndExpenses.slice(1);
  
  const amortization = historicalExpenses.reduce((a, b) => a + b, 0) / historicalExpenses.length;
  const adjustedEbit = originalEbit + currentYearExpense - amortization;

  const fraction = 1 / historicalExpenses.length;
  const unamortizedAmount = rndExpenses.reduce((acc, val, i) => {
    // The current year's expense is fully unamortized for this calculation model
    if (i === 0) return acc + val;
    // For historical expenses, reduce value based on its age
    return acc + (val * (1 - (i * fraction)));
  }, 0);

  form.setValue('adjustedEbit', parseFloat(adjustedEbit.toFixed(2)), { shouldValidate: true, shouldDirty: true });
  form.setValue('unamortizedAmount', parseFloat(unamortizedAmount.toFixed(2)), { shouldValidate: true, shouldDirty: true });
};







//Lease Capitalize-update or pass the (EBIT,interestAdj) from lease and cod value
function capitalizeLease(cod: number | null = null): [number, number] { // only modify the object value if no parameter is passed.
  const lease: number[] = [295,287, 235, 194, 151,98,605]; // from form
  const yearsBeyond: number = Math.floor(lease[lease.length - 1] / (lease.slice(1, -1).reduce((a, b) => a + b, 0) / (lease.length - 2)));
  //const avg: number = (lease.slice(0, -1).reduce((a, b) => a + b, 0) / (lease.length - 1));
  let preCod: number;
  if (cod === null) {
    preCod = 5 / 100; // to be fetched from form
  } else {
    preCod = cod / 100;
  }
  const cfList: number[] = lease.slice(1, -1).concat(Array(yearsBeyond).fill(lease[lease.length - 1] / yearsBeyond));
  //console.log(cfList);
  const sumPv: number = presentValueOfCashFlows(cfList, preCod);
  const depreciationAdj: number = sumPv / cfList.length;
  const EBITAdj: number = lease[0] - depreciationAdj;
  const debtAdj: number = sumPv;
  const interestAdj: number = debtAdj * preCod;
  //console.log(debtAdj);
  
  if (cod === null) {
    // Update the field value
  }
  return [EBITAdj, interestAdj];
}

//calculate cod for given ebit & int
function ptcodSyncCalc(EBIT: number, interest: number): number {
    let icr: number;
    if (EBIT < 0) {
        icr = -100000 + 1;
    } else if (interest === 0) {
        icr = 100000;
    } else {
        icr = EBIT / interest;
    }
    
    const firmType: string = "small"; // get from form
    const companySpread: number = 0.02 * 100; // get from database
    const rfr: number = 4.11; // get from form
    const countrySpread: number = 1.1; // get from form
    
    return rfr + countrySpread + companySpread;
}

//cod synth main function
function ptcodSync(): void {
    const EBIT: number = ebit + ebitAdjRnD; // get from form
    const Interest: number = parseInt(interestInput); // get from form
    let EBIT_adj: number = 0;
    let interest_adj: number = 0;
    let cod_i: number = 4.08; // rfr
    let cod_j: number = ptcodSyncCalc(EBIT, Interest);
    
    while (cod_i !== cod_j) {
        [EBIT_adj, interest_adj] = capitalizeLease(cod_i);
        cod_j = ptcodSyncCalc(EBIT + EBIT_adj, Interest + interest_adj);
        [EBIT_adj, interest_adj] = capitalizeLease(cod_j);
        cod_i = ptcodSyncCalc(EBIT + EBIT_adj, Interest + interest_adj);
    }
    // assign cod_i to cod
}

//cod from rating
function ptcodRating(): void {
    const rating: string = "AAA"; // from the form
    const companySpread: number = 34 * 100; // from the database
    const rfr: number = 4.01; // from form
    const codFromRating: number = parseFloat((rfr + companySpread).toFixed(4)); // to be saved to the form
}










